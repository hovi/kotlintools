buildscript {
    ext.kotlin_version = '1.4.32'
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.32'
    id "maven-publish"
}


repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://jitpack.io" }
}

group 'com.github.hovi'
version '0.0.21'

kotlin {
    iosX64("ios") {
        binaries {
            framework()
        }
    }
    jvm("jvm")
    js {
        /*browser {
        }*/
        /*nodejs {
        }*/
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmsharedMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmMain {
            dependsOn jvmsharedMain
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        iosMain {
        }
        iosTest {
        }
    }
}

task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}